{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP54LaWl9wQrJ7lbRLp42EF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"id":"4Iqngf2M7vLb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717654408983,"user_tz":-540,"elapsed":976632,"user":{"displayName":"방우혁","userId":"03587500139386391947"}},"outputId":"5894a972-9374-4a05-ec8d-3b4690d4dd5d"},"outputs":[{"output_type":"stream","name":"stdout","text":["             Date Time  p (mbar)  T (degC)  Tpot (K)  Tdew (degC)  rh (%)  \\\n","0  01.01.2009 00:10:00    996.52     -8.02    265.40        -8.90    93.3   \n","1  01.01.2009 00:20:00    996.57     -8.41    265.01        -9.28    93.4   \n","2  01.01.2009 00:30:00    996.53     -8.51    264.91        -9.31    93.9   \n","3  01.01.2009 00:40:00    996.51     -8.31    265.12        -9.07    94.2   \n","4  01.01.2009 00:50:00    996.51     -8.27    265.15        -9.04    94.1   \n","\n","   VPmax (mbar)  VPact (mbar)  VPdef (mbar)  sh (g/kg)  H2OC (mmol/mol)  \\\n","0          3.33          3.11          0.22       1.94             3.12   \n","1          3.23          3.02          0.21       1.89             3.03   \n","2          3.21          3.01          0.20       1.88             3.02   \n","3          3.26          3.07          0.19       1.92             3.08   \n","4          3.27          3.08          0.19       1.92             3.09   \n","\n","   rho (g/m**3)  wv (m/s)  max. wv (m/s)  wd (deg)  \n","0       1307.75      1.03           1.75     152.3  \n","1       1309.80      0.72           1.50     136.1  \n","2       1310.24      0.19           0.63     171.6  \n","3       1309.19      0.34           0.50     198.0  \n","4       1309.00      0.32           0.63     214.3  \n","Epoch 1/5\n","1637/1637 [==============================] - 202s 120ms/step - loss: 0.3154\n","Epoch 2/5\n","1637/1637 [==============================] - 189s 116ms/step - loss: 0.2861\n","Epoch 3/5\n","1637/1637 [==============================] - 192s 117ms/step - loss: 0.2819\n","Epoch 4/5\n","1637/1637 [==============================] - 189s 116ms/step - loss: 0.2792\n","Epoch 5/5\n","1637/1637 [==============================] - 191s 116ms/step - loss: 0.2763\n"]}],"source":["# 10-2. 온도 예측\n","# 필요한 라이브러리 설치\n","# !pip install tensorflow numpy pandas\n","\n","# 데이터 다운로드 및 전처리\n","import tensorflow as tf\n","import numpy as np\n","import pandas as pd\n","import os\n","\n","url = \"https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\"\n","zip_path = tf.keras.utils.get_file(origin=url, fname=\"jena_climate_2009_2016.csv.zip\", extract=True)\n","csv_path, _ = os.path.splitext(zip_path)\n","\n","df = pd.read_csv(csv_path)\n","print(df.head())\n","\n","# 데이터 전처리\n","def normalize(data):\n","    data_mean = data[:200000].mean(axis=0)\n","    data_std = data[:200000].std(axis=0)\n","    return (data - data_mean) / data_std\n","\n","float_data = df.iloc[:, 1:].values\n","float_data = normalize(float_data)\n","\n","# 시계열 데이터셋 생성\n","sampling_rate = 6\n","sequence_length = 120\n","delay = sampling_rate * (sequence_length + 24 - 1)\n","batch_size = 256\n","\n","dataset = tf.keras.utils.timeseries_dataset_from_array(\n","    float_data[:-delay],\n","    targets=float_data[delay:, 1],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    batch_size=batch_size\n",")\n","\n","# 데이터셋 나누기\n","train_size = int(0.5 * len(float_data))\n","val_size = int(0.25 * len(float_data))\n","test_size = len(float_data) - train_size - val_size\n","\n","train_dataset = dataset.take(train_size // batch_size)\n","val_dataset = dataset.skip(train_size // batch_size).take(val_size // batch_size)\n","test_dataset = dataset.skip((train_size + val_size) // batch_size)\n","\n","# 모델 정의 및 훈련\n","from tensorflow.keras import layers\n","\n","model = tf.keras.models.Sequential()\n","model.add(layers.LSTM(32, input_shape=(sequence_length, float_data.shape[-1])))\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer='adam', loss='mae')\n","history = model.fit(train_dataset, epochs=20, validation_data=val_dataset)\n","\n","# 모델 평가\n","test_loss = model.evaluate(test_dataset)\n","print(f\"Test MAE: {test_loss}\")\n"]},{"cell_type":"code","source":["# 10-3. 순환 신경망\n","# 필요한 라이브러리 설치\n","!pip install tensorflow numpy pandas\n","\n","# 데이터 다운로드 및 전처리\n","import tensorflow as tf\n","import numpy as np\n","import pandas as pd\n","import os\n","\n","url = \"https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\"\n","zip_path = tf.keras.utils.get_file(origin=url, fname=\"jena_climate_2009_2016.csv.zip\", extract=True)\n","csv_path, _ = os.path.splitext(zip_path)\n","\n","df = pd.read_csv(csv_path)\n","print(df.head())\n","\n","# 데이터 전처리\n","def normalize(data):\n","    data_mean = data[:200000].mean(axis=0)\n","    data_std = data[:200000].std(axis=0)\n","    return (data - data_mean) / data_std\n","\n","float_data = df.iloc[:, 1:].values\n","float_data = normalize(float_data)\n","\n","# 시계열 데이터셋 생성\n","sampling_rate = 6\n","sequence_length = 120\n","delay = sampling_rate * (sequence_length + 24 - 1)\n","batch_size = 256\n","\n","dataset = tf.keras.utils.timeseries_dataset_from_array(\n","    float_data[:-delay],\n","    targets=float_data[delay:, 1],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    batch_size=batch_size\n",")\n","\n","# 데이터셋 나누기\n","train_size = int(0.5 * len(float_data))\n","val_size = int(0.25 * len(float_data))\n","test_size = len(float_data) - train_size - val_size\n","\n","train_dataset = dataset.take(train_size // batch_size)\n","val_dataset = dataset.skip(train_size // batch_size).take(val_size // batch_size)\n","test_dataset = dataset.skip((train_size + val_size) // batch_size)\n","\n","# 모델 정의 및 훈련\n","from tensorflow.keras import layers\n","\n","model = tf.keras.models.Sequential()\n","model.add(layers.LSTM(32, input_shape=(sequence_length, float_data.shape[-1])))\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer='adam', loss='mae')\n","history = model.fit(train_dataset, epochs=20, validation_data=val_dataset)\n","\n","# 모델 평가\n","test_loss = model.evaluate(test_dataset)\n","print(f\"Test MAE: {test_loss}\")\n"],"metadata":{"id":"nl37EUhsdBIv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 10.4 순환 신경망의 고급 사용법\n","# 필요한 라이브러리 설치\n","!pip install tensorflow numpy pandas\n","\n","# 데이터 다운로드 및 전처리\n","import tensorflow as tf\n","import numpy as np\n","import pandas as pd\n","import os\n","\n","url = \"https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\"\n","zip_path = tf.keras.utils.get_file(origin=url, fname=\"jena_climate_2009_2016.csv.zip\", extract=True)\n","csv_path, _ = os.path.splitext(zip_path)\n","\n","df = pd.read_csv(csv_path)\n","print(df.head())\n","\n","# 데이터 전처리\n","def normalize(data):\n","    data_mean = data[:200000].mean(axis=0)\n","    data_std = data[:200000].std(axis=0)\n","    return (data - data_mean) / data_std\n","\n","float_data = df.iloc[:, 1:].values\n","float_data = normalize(float_data)\n","\n","# 시계열 데이터셋 생성\n","sampling_rate = 6\n","sequence_length = 120\n","delay = sampling_rate * (sequence_length + 24 - 1)\n","batch_size = 256\n","\n","dataset = tf.keras.utils.timeseries_dataset_from_array(\n","    float_data[:-delay],\n","    targets=float_data[delay:, 1],\n","    sampling_rate=sampling_rate,\n","    sequence_length=sequence_length,\n","    batch_size=batch_size\n",")\n","\n","# 데이터셋 나누기\n","train_size = int(0.5 * len(float_data))\n","val_size = int(0.25 * len(float_data))\n","test_size = len(float_data) - train_size - val_size\n","\n","train_dataset = dataset.take(train_size // batch_size)\n","val_dataset = dataset.skip(train_size // batch_size).take(val_size // batch_size)\n","test_dataset = dataset.skip((train_size + val_size) // batch_size)\n","\n","# 고급 모델 정의 및 훈련\n","from tensorflow.keras import layers\n","\n","# 드롭아웃을 적용한 LSTM\n","model = tf.keras.models.Sequential()\n","model.add(layers.LSTM(32, dropout=0.2, recurrent_dropout=0.2, input_shape=(sequence_length, float_data.shape[-1])))\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer='adam', loss='mae')\n","history = model.fit(train_dataset, epochs=20, validation_data=val_dataset)\n","\n","# 모델 평가\n","test_loss = model.evaluate(test_dataset)\n","print(f\"Test MAE (LSTM with Dropout): {test_loss}\")\n","\n","# 드롭아웃을 적용한 GRU\n","model = tf.keras.models.Sequential()\n","model.add(layers.GRU(32, dropout=0.2, recurrent_dropout=0.2, input_shape=(sequence_length, float_data.shape[-1])))\n","model.add(layers.Dense(1))\n","\n","model.compile(optimizer='adam', loss='mae')\n","history = model.fit(train_dataset, epochs=20, validation_data=val_dataset)\n","\n","# 모델 평가\n","test_loss = model.evaluate(test_dataset)\n","print(f\"Test MAE (GRU with Dropout): {test_loss}\")\n"],"metadata":{"id":"Ok68wO-fdF0V"},"execution_count":null,"outputs":[]}]}